Присвоим значения переменным:
    s21_decimal value_1 = decimal_from_string("-79228162514264337593543950335");

    s21_decimal value_2 = decimal_from_string("0.0000000000000000000000000001");
или
    s21_decimal value_2 = decimal_from_string("1e-28");

Для примера, создадим переменную для формирования результата, и выполним умножение:
    s21_decimal result = {0};
    s21_mul(value_1, value_2, &result);

Выведем результат в десятичной форме:
    print_decimal(result);

-7.9228162514264337593543950335

Выведем результат в двоичной форме:
    print_bits(&result, sizeof result);

10000000 00011100 00000000 00000000 
11111111 11111111 11111111 11111111 
11111111 11111111 11111111 11111111 
11111111 11111111 11111111 11111111

То же, с помощью макроса:
    PDB(result);

10000000 00011100 00000000 00000000 
11111111 11111111 11111111 11111111 
11111111 11111111 11111111 11111111 
11111111 11111111 11111111 11111111

Выведем результат в десятичной форме в разрезе интов нашей структуры:
    print_ints(&result, sizeof result);

| i |  unsigned  |    signed   |
--------------------------------
| 3 | 2149318656 | -2145648640 |
| 2 | 4294967295 |          -1 |
| 1 | 4294967295 |          -1 |
| 0 | 4294967295 |          -1 |

То же, с помощью макроса:
    PDI(result);

| i |  unsigned  |    signed   |
--------------------------------
| 3 | 2149318656 | -2145648640 |
| 2 | 4294967295 |          -1 |
| 1 | 4294967295 |          -1 |
| 0 | 4294967295 |          -1 |

Выведем результат в десятичной форме в строку:
    char str[50] = {0};
    decimal_to_string(result, str);
    puts(str);

-7.9228162514264337593543950335